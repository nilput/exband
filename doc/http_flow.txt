Our current way of handling requests:
    Server listens on port using 1 socket
    Server accepts connections and creates an http multiplexer, which manages 1 reading request_state, and multiple queued response request_states
    Server creates events for respective eloops when socket can read/write
    Server manages terminiation of socket

To handle pipelined GET requests, and keep-alive connections, we do the following:
    Whenever a request's body [POST] / headers [GET] ends
    We fork the current request and detatch it from the http multiplexer
    forking:
        copy whatever bytes in the input buffer to the new request state to which they belong
        make multiplexer->currently_reading point to the newly forked request state
        queue the newly forked request state in the http multiplexer for its response

        -> Request #1   [ Keep alive ]
           Response #1  [            ]
        -> Request #2   [            ]
           Response #2  [            ]

        -> Request #3   [ Pipelining ]
        -> Request #4   [            ]
           Response #3  [            ]
           Response #4  [            
on connection:
   multiplexer = new_http_multiplexer(server, socket)
   first_rqstate = new_request_state()
   multiplexer.queue_response(first_rqstate)
   multiplexer.set_currently_reading(first_rqstate)
on connection closed:
   destroy_http_multiplexer(server, socket)

on request parsed and beginning of new request:
   multiplexer = get_http_multiplexer(server, socket)
   forked_rqstate = fork_request_state(old_request_state)
   multiplexer.set_currently_reading(forked_rqstate)
   multiplexer.queue_response(forked_rqstate
request life time:
    request_state_created
        -> can be destroyed when its response is sent
        -> can be destroyed when an error occurs in parsing/request handler/socket
    
but we cannot immediately destroy requests when they're scheduled
so we treat requests as being cancelled when there's an error


a request handler is resolved as soon as headers are available
